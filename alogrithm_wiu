-------------------------------------------
OPS435 Assignment 1 - Fall 2020 - Algorithm
-------------------------------------------
Name: Wesley Iu
Code & Section: OPS435-NBB
Date: October 12th, 2020
-------------------------------------------
Description:
-------------------------------------------
A script/program created with Python3 to process date of birth data formatted such as "YYYY-MM-DD" and convert to standard format like "November 24, 2020".
Essentially the code will run in a specific order defined by the bottom code in which is provided by the professor, Raymond Chan.
If the user inputs data in the incorrect format then a message will appear showing the user how to input the data.
As the user inputs data towards the program, the first thing it'll do is "sanitize" the information by removing the special characters to keep the input clean.
The data will then be in the process of "size check" to see that what the user inputted in terms of the length is 8 characters long after the removal of the special characters (if used.)
Afterwards the data will go towards a "range check" to see that the year, month and day is correct. i.e if user inputted 1780 in which is out of the range of 1900 - 9999 then an error message is received, if user inputs month as 13 (out of 1-12) then an error message is received.
Once finished, the data will proceed however the year data will be moved on towards a "leap year" check to see if the year inputted is a leap year.
After finalizing, the data will be converted to the standard format through a new declaration and will print the output towards the user.
-------------------------------------------
Notes:
-------------------------------------------
<"obj" names will most likely be changed at somepoint. Currently using as a place holder.>
<Things are subjected to change with the thought process>
<Had a bit of struggle figuring out>
-------------------------------------------
Algorithm (Of code inside):
-------------------------------------------
(1) Define the built-in system functions to allow functionality of the script through import.

	import built-in system functions such as sys and os.
		
(2) Define a function with code to determine that the year in the date of the format is a leap year from data.
	
	define leap_year(obj):
		- Include if statements to see if the years are dividable in the given increments (4, 100, 400)
		- If year is not dividable then it's not leap year, otherwise it is.
		- Return values to obj
	
(3) Define a function with code to ensure that the special characters inside the different date formats such as YYYY-MM-DD are removed to allow analysis of the given year, month and day from the data.
	
	define sanitize(obj1, obj2):
		- Have obj1 bound towards user_raw_data with a string method used to help replace the special characters
		- obj2 will be bound towards allow_chars
		- Return values to obj1
		<still thinking/processing> <- Likely to change structure

(4) Define a function with code to ensure that the length of the date format after extraction is correct.

	def size_check(obj, intobj):
		- Declare obj variable towards dob 
		- Declare intobj as 8 as that's the total amount of characters after special characters are removed/sanitized.
		- If else statement used to define if the length of the characters after being sanitized are proper. If there's more than 8 characters or not equal in the length then false, else return true if there's 8 characters
		- Return values to obj
		<still thinking/processing> <- Likely to change structure

(5) Define a function with code that'll create a minimum and maximum range for years that are allowed (i.e 1900 or later...) as well as the range of months to ensure realistic information from the given data.

	def range_check(obj1, obj2):
		- obj1 will be assigned towards the called variables year, month, day(?)
		- Multiple if else statements to decide if the they are in range. i.e if year is not in the range of 1900-9999 then false else return true and etc.
		- Returns values to obj1 
		<still thinking/processing> <- Likely to change structure

(6) Define a function with code to allow the usage of the data to be read and extracted with the script.

	def usage(): 
		- Use a print statement to show how to use the program if the user fails to input correctly.
		- Returned towards len(sys.argv)

(7) As provided with the given code by professor at the end of the script will call the created functions as well as the data to process, convert and output the results.
    (Again, given by the professor)
